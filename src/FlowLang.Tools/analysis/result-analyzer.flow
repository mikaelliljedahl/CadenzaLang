// FlowLang Result Type Analyzer
// Comprehensive analysis of Result type usage and error handling patterns

/*spec
intent: "Analyze FlowLang Result type usage for proper error handling and propagation"
rules:
  - "Validate Result type usage - functions with effects should return Result"
  - "Check error propagation - proper ? operator usage and error handling"
  - "Ensure match completeness - all Result branches should be handled"
  - "Validate error message quality - descriptive and actionable error messages"
  - "Check for unused Result values - all Results must be handled"
  - "Detect unreachable error paths and inconsistent error handling"
postconditions:
  - "All Result type violations are detected and reported"
  - "Error handling patterns are validated against FlowLang best practices"
  - "Actionable suggestions provided for improving error handling"
spec*/

struct ResultIssue {
    rule_id: string,
    severity: string,
    message: string,
    file_path: string,
    line: int,
    column: int,
    fix_suggestion: string
}

struct ResultAnalysisResult {
    issues: List<ResultIssue>,
    total_functions: int,
    result_returning_functions: int,
    functions_with_error_propagation: int,
    common_error_patterns: List<(string, int)>
}

// Main result type analyzer function
function analyze_results(file_path: string, content: string) uses [Logging] -> Result<ResultAnalysisResult, string> {
    FlowLang.Runtime.LoggingRuntime.LogInfo("Analyzing Result type usage in: " + file_path)
    
    let issues = []
    let totalFunctions = 0
    let resultReturningFunctions = 0
    let functionsWithErrorPropagation = 0
    let commonErrorPatterns = []
    
    // Parse content and extract function information
    let functions = extract_result_functions(content)
    
    match functions {
        Ok(functionList) -> {
            totalFunctions = functionList.length
            
            // Analyze each function for Result type usage
            let analysisResult = analyze_function_results(functionList, file_path, content)
            match analysisResult {
                Ok(functionIssues) -> {
                    issues = functionIssues
                    
                    // Count function types
                    let counts = count_result_function_types(functionList)
                    resultReturningFunctions = counts.0
                    functionsWithErrorPropagation = counts.1
                    commonErrorPatterns = counts.2
                    
                    let result = ResultAnalysisResult {
                        issues: issues,
                        total_functions: totalFunctions,
                        result_returning_functions: resultReturningFunctions,
                        functions_with_error_propagation: functionsWithErrorPropagation,
                        common_error_patterns: commonErrorPatterns
                    }
                    
                    FlowLang.Runtime.LoggingRuntime.LogInfo("Result analysis completed - found " + FlowLang.Runtime.StringRuntime.ToString(issues.length) + " issues")
                    return Ok(result)
                }
                Error(err) -> {
                    FlowLang.Runtime.LoggingRuntime.LogError("Function analysis failed: " + err)
                    return Error(err)
                }
            }
        }
        Error(err) -> {
            FlowLang.Runtime.LoggingRuntime.LogError("Function extraction failed: " + err)
            return Error(err)
        }
    }
}

// Extract function information for Result analysis
function extract_result_functions(content: string) -> Result<List<ResultFunctionInfo>, string> {
    let functions = []
    
    // Simple pattern matching for function declarations
    let lines = FlowLang.Runtime.StringRuntime.Split(content, "\n")
    
    let functionInfo = extract_result_function_info(lines)
    match functionInfo {
        Ok(info) -> {
            functions = info :: functions
            return Ok(functions)
        }
        Error(err) -> {
            return Error(err)
        }
    }
}

struct ResultFunctionInfo {
    name: string,
    has_effects: bool,
    return_type: string,
    returns_result: bool,
    body_content: string,
    line_number: int,
    uses_error_propagation: bool,
    has_explicit_error_handling: bool
}

// Extract function information focusing on Result patterns
function extract_result_function_info(lines: List<string>) -> Result<ResultFunctionInfo, string> {
    if lines.length > 0 {
        let firstLine = lines[0]
        
        // Check if this is a function declaration
        if FlowLang.Runtime.StringRuntime.Contains(firstLine, "function ") {
            let functionName = extract_function_name_from_line(firstLine)
            let hasEffects = FlowLang.Runtime.StringRuntime.Contains(firstLine, "uses [")
            let returnType = extract_return_type_from_line(firstLine)
            let returnsResult = FlowLang.Runtime.StringRuntime.Contains(returnType, "Result<")
            let bodyContent = join_lines_content(lines)
            let usesErrorPropagation = FlowLang.Runtime.StringRuntime.Contains(bodyContent, "?")
            let hasExplicitErrorHandling = FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Error(") || FlowLang.Runtime.StringRuntime.Contains(bodyContent, "match ")
            
            let info = ResultFunctionInfo {
                name: functionName,
                has_effects: hasEffects,
                return_type: returnType,
                returns_result: returnsResult,
                body_content: bodyContent,
                line_number: 1,
                uses_error_propagation: usesErrorPropagation,
                has_explicit_error_handling: hasExplicitErrorHandling
            }
            
            return Ok(info)
        }
    }
    
    return Error("No function found")
}

// Extract function name from line
function extract_function_name_from_line(line: string) -> string {
    if FlowLang.Runtime.StringRuntime.Contains(line, "function ") {
        let parts = FlowLang.Runtime.StringRuntime.Split(line, " ")
        if parts.length > 1 {
            let namePart = parts[1]
            if FlowLang.Runtime.StringRuntime.Contains(namePart, "(") {
                let nameparts = FlowLang.Runtime.StringRuntime.Split(namePart, "(")
                if nameparts.length > 0 {
                    return nameparts[0]
                }
            }
            return namePart
        }
    }
    return "unknown"
}

// Extract return type from line
function extract_return_type_from_line(line: string) -> string {
    if FlowLang.Runtime.StringRuntime.Contains(line, "-> ") {
        let parts = FlowLang.Runtime.StringRuntime.Split(line, "-> ")
        if parts.length > 1 {
            let returnPart = parts[1]
            if FlowLang.Runtime.StringRuntime.Contains(returnPart, " {") {
                let typeparts = FlowLang.Runtime.StringRuntime.Split(returnPart, " {")
                if typeparts.length > 0 {
                    return typeparts[0]
                }
            }
            return returnPart
        }
    }
    return "void"
}

// Join lines for body content
function join_lines_content(lines: List<string>) -> string {
    if lines.length > 0 {
        return lines[0]
    }
    return ""
}

// Analyze function Result patterns and return issues
function analyze_function_results(functions: List<ResultFunctionInfo>, file_path: string, content: string) -> Result<List<ResultIssue>, string> {
    let allIssues = []
    
    if functions.length > 0 {
        let firstFunction = functions[0]
        
        // Check if functions with effects return Result
        let effectResultIssues = check_effect_result_consistency(firstFunction, file_path)
        allIssues = append_result_issues(allIssues, effectResultIssues)
        
        // Check for unused Result values
        let unusedResultIssues = check_unused_results(firstFunction, file_path)
        allIssues = append_result_issues(allIssues, unusedResultIssues)
        
        // Check error propagation usage
        let propagationIssues = check_error_propagation_usage(firstFunction, file_path)
        allIssues = append_result_issues(allIssues, propagationIssues)
        
        // Check error handling completeness
        let handlingIssues = check_error_handling_completeness(firstFunction, file_path)
        allIssues = append_result_issues(allIssues, handlingIssues)
        
        // Check error message quality
        let messageIssues = check_error_message_quality(firstFunction, file_path)
        allIssues = append_result_issues(allIssues, messageIssues)
        
        return Ok(allIssues)
    }
    
    return Ok([])
}

// Check if functions with effects return Result types
function check_effect_result_consistency(func: ResultFunctionInfo, file_path: string) -> List<ResultIssue> {
    let issues = []
    
    if func.has_effects && !func.returns_result {
        let issue = ResultIssue {
            rule_id: "effect-result-consistency",
            severity: "warning",
            message: "Function '" + func.name + "' has effects but doesn't return Result type for error handling",
            file_path: file_path,
            line: func.line_number,
            column: 1,
            fix_suggestion: "Change return type to Result<T, E> for proper error handling"
        }
        issues = issue :: issues
    }
    
    return issues
}

// Check for unused Result values
function check_unused_results(func: ResultFunctionInfo, file_path: string) -> List<ResultIssue> {
    let issues = []
    
    let bodyContent = func.body_content
    
    // Check for function calls that return Result but aren't handled
    if FlowLang.Runtime.StringRuntime.Contains(bodyContent, "FlowLang.Runtime.FileSystemRuntime.ReadFile(") {
        if !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "match ") && 
           !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "let ") &&
           !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "?") {
            let issue = ResultIssue {
                rule_id: "unused-results",
                severity: "error",
                message: "Result from ReadFile() is ignored and must be handled",
                file_path: file_path,
                line: func.line_number,
                column: 1,
                fix_suggestion: "Use 'let result = ReadFile()?' for error propagation or handle with match"
            }
            issues = issue :: issues
        }
    }
    
    if FlowLang.Runtime.StringRuntime.Contains(bodyContent, "FlowLang.Runtime.FileSystemRuntime.WriteFile(") {
        if !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "match ") && 
           !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "let ") &&
           !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "?") {
            let issue = ResultIssue {
                rule_id: "unused-results",
                severity: "error",
                message: "Result from WriteFile() is ignored and must be handled",
                file_path: file_path,
                line: func.line_number,
                column: 1,
                fix_suggestion: "Use 'let result = WriteFile()?' for error propagation or handle with match"
            }
            issues = issue :: issues
        }
    }
    
    return issues
}

// Check error propagation usage
function check_error_propagation_usage(func: ResultFunctionInfo, file_path: string) -> List<ResultIssue> {
    let issues = []
    
    if func.uses_error_propagation && !func.returns_result {
        let issue = ResultIssue {
            rule_id: "error-propagation-validation",
            severity: "error",
            message: "Function '" + func.name + "' uses error propagation (?) but doesn't return Result type",
            file_path: file_path,
            line: func.line_number,
            column: 1,
            fix_suggestion: "Change return type to Result<T, E> to enable error propagation"
        }
        issues = issue :: issues
    }
    
    return issues
}

// Check error handling completeness
function check_error_handling_completeness(func: ResultFunctionInfo, file_path: string) -> List<ResultIssue> {
    let issues = []
    
    if func.returns_result {
        let bodyContent = func.body_content
        
        // Check if function has proper error returns
        let hasOkReturn = FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Ok(")
        let hasErrorReturn = FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Error(")
        
        if !hasOkReturn && !hasErrorReturn {
            let issue = ResultIssue {
                rule_id: "error-handling-completeness",
                severity: "error",
                message: "Function '" + func.name + "' returns Result but has no Ok() or Error() returns",
                file_path: file_path,
                line: func.line_number,
                column: 1,
                fix_suggestion: "Add proper Ok() and Error() returns to all code paths"
            }
            issues = issue :: issues
        }
        
        // Check for proper match usage
        if FlowLang.Runtime.StringRuntime.Contains(bodyContent, "match ") {
            if !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Ok(") || 
               !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Error(") {
                let issue = ResultIssue {
                    rule_id: "match-completeness",
                    severity: "warning",
                    message: "Match statement in '" + func.name + "' should handle both Ok and Error cases",
                    file_path: file_path,
                    line: func.line_number,
                    column: 1,
                    fix_suggestion: "Ensure match statement covers both Ok and Error branches"
                }
                issues = issue :: issues
            }
        }
    }
    
    return issues
}

// Check error message quality
function check_error_message_quality(func: ResultFunctionInfo, file_path: string) -> List<ResultIssue> {
    let issues = []
    
    let bodyContent = func.body_content
    
    // Check for generic error messages
    if FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Error(\"error\")") {
        let issue = ResultIssue {
            rule_id: "error-message-quality",
            severity: "info",
            message: "Generic error message 'error' in function '" + func.name + "' should be more descriptive",
            file_path: file_path,
            line: func.line_number,
            column: 1,
            fix_suggestion: "Use descriptive error messages that help users understand what went wrong"
        }
        issues = issue :: issues
    }
    
    if FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Error(\"failed\")") {
        let issue = ResultIssue {
            rule_id: "error-message-quality",
            severity: "info",
            message: "Generic error message 'failed' in function '" + func.name + "' should be more descriptive",
            file_path: file_path,
            line: func.line_number,
            column: 1,
            fix_suggestion: "Use descriptive error messages that help users understand what went wrong"
        }
        issues = issue :: issues
    }
    
    // Check for missing error context
    if FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Error(") {
        if !FlowLang.Runtime.StringRuntime.Contains(bodyContent, "Error(\"") {
            let issue = ResultIssue {
                rule_id: "error-message-quality",
                severity: "info",
                message: "Error in function '" + func.name + "' should include descriptive message",
                file_path: file_path,
                line: func.line_number,
                column: 1,
                fix_suggestion: "Add descriptive error message: Error(\"specific description of what went wrong\")"
            }
            issues = issue :: issues
        }
    }
    
    return issues
}

// Append issues to result issue list
function append_result_issues(existingIssues: List<ResultIssue>, newIssues: List<ResultIssue>) -> List<ResultIssue> {
    // For now, just return the new issues
    // In a complete implementation, this would properly append lists
    return newIssues
}

// Count Result function types
function count_result_function_types(functions: List<ResultFunctionInfo>) -> (int, int, List<(string, int)>) {
    let resultReturningCount = 0
    let errorPropagationCount = 0
    let commonPatterns = []
    
    if functions.length > 0 {
        let firstFunc = functions[0]
        
        if firstFunc.returns_result {
            resultReturningCount = 1
        }
        
        if firstFunc.uses_error_propagation {
            errorPropagationCount = 1
        }
        
        // Count common error patterns
        if FlowLang.Runtime.StringRuntime.Contains(firstFunc.body_content, "match ") {
            commonPatterns = ("match-pattern", 1) :: commonPatterns
        }
        
        if FlowLang.Runtime.StringRuntime.Contains(firstFunc.body_content, "?") {
            commonPatterns = ("error-propagation", 1) :: commonPatterns
        }
        
        if FlowLang.Runtime.StringRuntime.Contains(firstFunc.body_content, "Ok(") {
            commonPatterns = ("ok-return", 1) :: commonPatterns
        }
        
        if FlowLang.Runtime.StringRuntime.Contains(firstFunc.body_content, "Error(") {
            commonPatterns = ("error-return", 1) :: commonPatterns
        }
    }
    
    return (resultReturningCount, errorPropagationCount, commonPatterns)
}

// Format result analysis results
function format_result_analysis_results(results: ResultAnalysisResult) uses [IO, Logging] -> Result<string, string> {
    FlowLang.Runtime.LoggingRuntime.LogInfo("Formatting result analysis results...")
    
    FlowLang.Runtime.ConsoleRuntime.WriteLine("=== Result Type Analysis ===")
    FlowLang.Runtime.ConsoleRuntime.WriteLine("Total functions analyzed: " + FlowLang.Runtime.StringRuntime.ToString(results.total_functions))
    FlowLang.Runtime.ConsoleRuntime.WriteLine("Result-returning functions: " + FlowLang.Runtime.StringRuntime.ToString(results.result_returning_functions))
    FlowLang.Runtime.ConsoleRuntime.WriteLine("Functions with error propagation: " + FlowLang.Runtime.StringRuntime.ToString(results.functions_with_error_propagation))
    FlowLang.Runtime.ConsoleRuntime.WriteLine("Total issues found: " + FlowLang.Runtime.StringRuntime.ToString(results.issues.length))
    FlowLang.Runtime.ConsoleRuntime.WriteLine("")
    
    if results.issues.length > 0 {
        FlowLang.Runtime.ConsoleRuntime.WriteLine("Issues found:")
        
        // Display first issue as example
        let firstIssue = results.issues[0]
        FlowLang.Runtime.ConsoleRuntime.WriteLine("  [" + firstIssue.severity + "] " + firstIssue.message)
        FlowLang.Runtime.ConsoleRuntime.WriteLine("    Fix: " + firstIssue.fix_suggestion)
        
        if results.issues.length > 1 {
            FlowLang.Runtime.ConsoleRuntime.WriteLine("  ... and " + FlowLang.Runtime.StringRuntime.ToString(results.issues.length - 1) + " more issues")
        }
    } else {
        FlowLang.Runtime.ConsoleRuntime.WriteLine("✓ No Result type issues found")
    }
    
    FlowLang.Runtime.ConsoleRuntime.WriteLine("")
    
    if results.common_error_patterns.length > 0 {
        FlowLang.Runtime.ConsoleRuntime.WriteLine("Common error patterns:")
        let firstPattern = results.common_error_patterns[0]
        FlowLang.Runtime.ConsoleRuntime.WriteLine("  " + firstPattern.0 + ": " + FlowLang.Runtime.StringRuntime.ToString(firstPattern.1) + " occurrences")
    }
    
    FlowLang.Runtime.ConsoleRuntime.WriteLine("")
    return Ok("Result analysis formatted")
}

// Main function for testing result analyzer
function main() uses [FileSystem, Logging, IO] -> Result<int, string> {
    FlowLang.Runtime.LoggingRuntime.LogInfo("FlowLang Result Type Analyzer Test")
    
    let testFile = "src/FlowLang.Tools/linter.flow"
    let contentResult = FlowLang.Runtime.FileSystemRuntime.ReadFile(testFile)
    
    match contentResult {
        Ok(content) -> {
            let analysisResult = analyze_results(testFile, content)
            match analysisResult {
                Ok(results) -> {
                    let formatResult = format_result_analysis_results(results)
                    match formatResult {
                        Ok(_) -> {
                            FlowLang.Runtime.LoggingRuntime.LogInfo("Result analysis completed successfully")
                            return Ok(0)
                        }
                        Error(err) -> {
                            FlowLang.Runtime.LoggingRuntime.LogError("Failed to format results: " + err)
                            return Error(err)
                        }
                    }
                }
                Error(err) -> {
                    FlowLang.Runtime.LoggingRuntime.LogError("Result analysis failed: " + err)
                    return Error(err)
                }
            }
        }
        Error(err) -> {
            FlowLang.Runtime.LoggingRuntime.LogError("Failed to read test file: " + err)
            return Error(err)
        }
    }
}